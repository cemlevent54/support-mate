{
  "cqrs": {
    "commands": {
      "permission": {
        "createPermission": {
          "logs": {
            "executing": "Yetki oluşturma işlemi başlatıldı",
            "success": "Yetki başarıyla oluşturuldu",
            "fail": "Yetki oluşturulurken hata oluştu"
          }
        },
        "deletePermission": {
          "logs": {
            "executing": "Yetki silme işlemi başlatıldı",
            "success": "Yetki başarıyla silindi",
            "fail": "Yetki silinirken hata oluştu",
            "notFound": "Yetki bulunamadı"
          }
        },
        "updatePermission": {
          "logs": {
            "executing": "Yetki güncelleme işlemi başlatıldı",
            "success": "Yetki başarıyla güncellendi",
            "fail": "Yetki güncellenirken hata oluştu",
            "notFound": "Yetki bulunamadı"
          }
        }
      },
      "role": {
        "createRole": {
          "logs": {
            "executing": "Rol oluşturma işlemi başlatıldı",
            "success": "Rol başarıyla oluşturuldu",
            "fail": "Rol oluşturulurken hata oluştu"
          }
        },
        "deleteRole": {
          "logs": {
            "executing": "Rol silme işlemi başlatıldı",
            "success": "Rol başarıyla silindi",
            "fail": "Rol silinirken hata oluştu",
            "notFound": "Rol bulunamadı"
          }
        },
        "updateRole": {
          "logs": {
            "executing": "Rol güncelleme işlemi başlatıldı",
            "success": "Rol başarıyla güncellendi",
            "fail": "Rol güncellenirken hata oluştu",
            "notFound": "Rol bulunamadı"
          }
        }
      },
      "user": {
        "createUser": {
          "logs": {
            "executing": "Kullanıcı oluşturma işlemi başlatıldı",
            "success": "Kullanıcı başarıyla oluşturuldu",
            "fail": "Kullanıcı oluşturulurken hata oluştu"
          }
        },
        "deleteUser": {
          "logs": {
            "executing": "Kullanıcı silme işlemi başlatıldı",
            "success": "Kullanıcı başarıyla silindi",
            "fail": "Kullanıcı silinirken hata oluştu",
            "notFound": "Kullanıcı bulunamadı"
          }
        },
        "updateUser": {
          "logs": {
            "executing": "Kullanıcı güncelleme işlemi başlatıldı",
            "success": "Kullanıcı başarıyla güncellendi",
            "fail": "Kullanıcı güncellenirken hata oluştu",
            "notFound": "Kullanıcı bulunamadı"
          }
        },
        "updateLeader": {
          "logs": {
            "executing": "Leader güncelleme işlemi başlatıldı",
            "success": "Leader başarıyla güncellendi",
            "fail": "Leader güncellenirken hata oluştu",
            "notFound": "Leader bulunamadı"
          }
        }
      }
    },
    "handler": {
      "command": {
        "logs": {
          "registered": "Komut işleyici kaydedildi",
          "noHandler": "Komut için işleyici bulunamadı",
          "dispatching": "Komut işleniyor",
          "executing": "Komut işleyici çalıştırılıyor",
          "success": "Komut başarıyla işlendi",
          "fail": "Komut işlenirken hata oluştu"
        }
      },
      "query": {
        "logs": {
          "registered": "Sorgu işleyici kaydedildi",
          "noHandler": "Sorgu için işleyici bulunamadı",
          "dispatching": "Sorgu işleniyor",
          "executing": "Sorgu işleyici çalıştırılıyor",
          "success": "Sorgu başarıyla işlendi",
          "fail": "Sorgu işlenirken hata oluştu"
        }
      }
    },
    "queries": {
      "user": {
        "getUserById": {
          "logs": {
            "executing": "Kullanıcı ID ile getirme işlemi başlatıldı",
            "success": "Kullanıcı başarıyla getirildi",
            "fail": "Kullanıcı getirilirken hata oluştu"
          }
        },
        "getUserByEmail": {
          "logs": {
            "executing": "Kullanıcı email ile getirme işlemi başlatıldı",
            "success": "Kullanıcı başarıyla getirildi",
            "fail": "Kullanıcı getirilirken hata oluştu"
          }
        },
        "findAnyUserByEmail": {
          "logs": {
            "executing": "Kullanıcı email ile arama işlemi başlatıldı",
            "success": "Kullanıcı başarıyla bulundu",
            "fail": "Kullanıcı aranırken hata oluştu"
          }
        },
        "findUserByGoogleId": {
          "logs": {
            "executing": "Kullanıcı Google ID ile arama işlemi başlatıldı",
            "success": "Kullanıcı başarıyla bulundu",
            "fail": "Kullanıcı aranırken hata oluştu"
          }
        },
        "getAllUsers": {
          "logs": {
            "executing": "Tüm kullanıcıları getirme işlemi başlatıldı",
            "success": "Tüm kullanıcılar başarıyla getirildi",
            "fail": "Kullanıcılar getirilirken hata oluştu"
          }
        },
        "getUsersByRole": {
          "logs": {
            "executing": "Rol bazlı kullanıcı getirme işlemi başlatıldı",
            "success": "Rol bazlı kullanıcılar başarıyla getirildi",
            "fail": "Kullanıcılar getirilirken hata oluştu"
          }
        },
        "getEmployeesByLeader": {
          "logs": {
            "executing": "Leader'a bağlı çalışanları getirme işlemi başlatıldı",
            "success": "Leader'a bağlı çalışanlar başarıyla getirildi",
            "fail": "Çalışanlar getirilirken hata oluştu"
          }
        },
        "getLeaderByEmployee": {
          "logs": {
            "executing": "Çalışanın leader'ını getirme işlemi başlatıldı",
            "success": "Çalışanın leader'ı başarıyla getirildi",
            "notFound": "Çalışanın leader'ı bulunamadı",
            "fail": "Leader getirilirken hata oluştu"
          }
        },
        "getLeadersWithEmployees": {
          "logs": {
            "executing": "Çalışanları ile birlikte leader'ları getirme işlemi başlatıldı",
            "success": "Leader'lar başarıyla getirildi",
            "fail": "Leader'lar getirilirken hata oluştu"
          }
        }
      },
      "role": {
        "getRoleById": {
          "logs": {
            "executing": "Rol ID ile getirme işlemi başlatıldı",
            "success": "Rol başarıyla getirildi",
            "fail": "Rol getirilirken hata oluştu"
          }
        },
        "getAllRoles": {
          "logs": {
            "executing": "Tüm rolleri getirme işlemi başlatıldı",
            "success": "Tüm roller başarıyla getirildi",
            "fail": "Roller getirilirken hata oluştu"
          }
        },
        "getRoleByName": {
          "logs": {
            "executing": "Rol adı ile getirme işlemi başlatıldı",
            "success": "Rol başarıyla getirildi",
            "fail": "Rol getirilirken hata oluştu"
          }
        }
      },
      "permission": {
        "getPermissionById": {
          "logs": {
            "executing": "Yetki ID ile getirme işlemi başlatıldı",
            "success": "Yetki başarıyla getirildi",
            "fail": "Yetki getirilirken hata oluştu"
          }
        },
        "getAllPermissions": {
          "logs": {
            "executing": "Tüm yetkileri getirme işlemi başlatıldı",
            "success": "Tüm yetkiler başarıyla getirildi",
            "fail": "Yetkiler getirilirken hata oluştu"
          }
        },
        "getPermissionByCode": {
          "logs": {
            "executing": "Yetki kodu ile getirme işlemi başlatıldı",
            "success": "Yetki başarıyla getirildi",
            "fail": "Yetki getirilirken hata oluştu"
          }
        }
      },
      "report": {
        "getDashboardStatistics": {
          "logs": {
            "executing": "Dashboard istatistikleri getirme işlemi başlatıldı",
            "success": "Dashboard istatistikleri başarıyla getirildi",
            "fail": "Dashboard istatistikleri getirilirken hata oluştu"
          }
        }
      }
    }
  },
  "middlewares": {
    "authMiddleware": {
      "logs": {
        "missingAuthHeader": "Authorization header eksik veya Bearer ile başlamıyor",
        "invalidToken": "Geçersiz veya süresi dolmuş token",
        "tokenVerified": "Token doğrulandı",
        "userNotAuthenticated": "Kullanıcı doğrulanmamış, role kontrolü başarısız",
        "insufficientRole": "Kullanıcı rolü yetersiz",
        "accessGranted": "Erişim izni verildi"
      }
    },
    "jwtService": {
      "logs": {
        "userAddedToBlacklist": "Kullanıcı kara listeye eklendi",
        "userRemovedFromBlacklist": "Kullanıcı kara listeden çıkarıldı",
        "activeSessionAdded": "Aktif oturum eklendi",
        "activeSessionRemoved": "Aktif oturum kaldırıldı",
        "accessTokenGenerated": "Erişim token'ı oluşturuldu",
        "refreshTokenGenerated": "Yenileme token'ı oluşturuldu",
        "accessTokenVerified": "Erişim token'ı doğrulandı",
        "refreshTokenVerified": "Yenileme token'ı doğrulandı",
        "jwtTokenGenerated": "JWT token'ı oluşturuldu",
        "jwtTokenVerified": "JWT token'ı doğrulandı",
        "secureTokenGenerated": "Güvenli token oluşturuldu",
        "passwordResetTokenGenerated": "Şifre sıfırlama token'ı oluşturuldu",
        "passwordResetTokenVerified": "Şifre sıfırlama token'ı doğrulandı",
        "jwtVerificationFailed": "JWT doğrulama başarısız",
        "blacklisted": "Kullanıcı kara listede",
        "tokenMismatch": "Token uyuşmazlığı",
        "noActiveSession": "Aktif oturum bulunamadı",
        "sessionRecreated": "Oturum yeniden oluşturuldu",
        "invalidTokenType": "Geçersiz token tipi"
      }
    }
  },
  "repositories": {
    "permissionRepository": {
      "logs": {
        "creating": "Yetki oluşturuluyor",
        "created": "Yetki başarıyla oluşturuldu",
        "errorCreating": "Yetki oluşturulurken hata oluştu",
        "finding": "Yetki aranıyor",
        "found": "Yetki bulundu",
        "notFound": "Yetki bulunamadı",
        "updating": "Yetki güncelleniyor",
        "updated": "Yetki başarıyla güncellendi",
        "errorUpdating": "Yetki güncellenirken hata oluştu",
        "deleting": "Yetki siliniyor",
        "deleted": "Yetki başarıyla silindi",
        "errorDeleting": "Yetki silinirken hata oluştu"
      }
    },
    "roleRepository": {
      "logs": {
        "creating": "Rol oluşturuluyor",
        "created": "Rol başarıyla oluşturuldu",
        "errorCreating": "Rol oluşturulurken hata oluştu",
        "finding": "Rol aranıyor",
        "found": "Rol bulundu",
        "notFound": "Rol bulunamadı",
        "updating": "Rol güncelleniyor",
        "updated": "Rol başarıyla güncellendi",
        "errorUpdating": "Rol güncellenirken hata oluştu",
        "deleting": "Rol siliniyor",
        "deleted": "Rol başarıyla silindi",
        "errorDeleting": "Rol silinirken hata oluştu"
      }
    },
    "userRepository": {
      "logs": {
        "creating": "Kullanıcı oluşturuluyor",
        "created": "Kullanıcı başarıyla oluşturuldu",
        "errorCreating": "Kullanıcı oluşturulurken hata oluştu",
        "finding": "Kullanıcı aranıyor",
        "found": "Kullanıcı bulundu",
        "notFound": "Kullanıcı bulunamadı",
        "errorFinding": "Kullanıcı aranırken hata oluştu",
        "updating": "Kullanıcı güncelleniyor",
        "updated": "Kullanıcı başarıyla güncellendi",
        "errorUpdating": "Kullanıcı güncellenirken hata oluştu",
        "deleting": "Kullanıcı siliniyor",
        "deleted": "Kullanıcı başarıyla silindi",
        "errorDeleting": "Kullanıcı silinirken hata oluştu",
        "findingLeadersWithEmployees": "Çalışanları ile birlikte leader'lar aranıyor",
        "foundLeadersWithEmployees": "Leader'lar başarıyla bulundu",
        "errorFindingLeadersWithEmployees": "Leader'lar aranırken hata oluştu"
      }
    }
  },
  "services": {
    "authService": {
      "logs": {
        "registerRequest": "Kayıt isteği alındı",
        "registerSuccess": "Kayıt başarılı",
        "registerError": "Kayıt hatası",
        "registerConflict": "Kayıt çakışması",
        "loginRequest": "Giriş isteği alındı",
        "loginSuccess": "Giriş başarılı",
        "loginError": "Giriş hatası",
        "loginFailed": "Giriş başarısız",
        "logoutRequest": "Çıkış isteği alındı",
        "logoutSuccess": "Çıkış başarılı",
        "logoutError": "Çıkış hatası",
        "refreshRequest": "Token yenileme isteği alındı",
        "refreshSuccess": "Token yenileme başarılı",
        "refreshError": "Token yenileme hatası",
        "userLogoutProcessStarted": "Kullanıcı çıkış işlemi başlatıldı",
        "useridRequired": "Kullanıcı ID gerekli",
        "emailAlreadyInUse": "Bu email adresi zaten kullanımda",
        "userNotActive": "Kullanıcı aktif değil",
        "emailNotVerified": "Email adresi doğrulanmamış",
        "userReactivated": "Kullanıcı yeniden aktifleştirildi",
        "verificationEmailSent": "Doğrulama emaili gönderildi",
        "validationError": "Doğrulama hatası",
        "missingVerificationData": "Doğrulama verileri eksik",
        "invalidVerificationToken": "Geçersiz doğrulama token'ı",
        "invalidVerificationCode": "Geçersiz doğrulama kodu",
        "invalidTokenEmail": "Token'da email bilgisi bulunamadı",
        "verificationCodeResent": "Doğrulama kodu yeniden gönderildi",
        "emailVerificationSuccess": "Email doğrulama başarılı",
        "onlineRoleName": "Rol adı",
        "customerSupportLoginDetected": "Müşteri destek girişi tespit edildi",
        "redisPushSuccess": "Redis'e başarıyla eklendi",
        "currentOnlineUsers": "Mevcut online kullanıcılar",
        "customerSupporterAlreadyOnline": "Müşteri destek zaten online",
        "customerSupporterOnlineError": "Müşteri destek online hatası"
      }
    },
    "permissionService": {
      "logs": {
        "getAllRequest": "Tüm yetkiler için istek alındı",
        "getAllSuccess": "Tüm yetkiler başarıyla getirildi",
        "getAllNotFound": "Hiç yetki bulunamadı",
        "getAllError": "Tüm yetkiler getirilirken hata oluştu",
        "getByIdRequest": "ID ile yetki sorgulama isteği alındı",
        "getByIdSuccess": "Yetki başarıyla getirildi",
        "getByIdNotFound": "Yetki bulunamadı",
        "getByIdError": "Yetki getirilirken hata oluştu",
        "createRequest": "Yetki oluşturma isteği alındı",
        "createSuccess": "Yetki başarıyla oluşturuldu",
        "createConflict": "Aynı koda sahip yetki zaten mevcut",
        "createError": "Yetki oluşturulurken hata oluştu",
        "updateRequest": "Yetki güncelleme isteği alındı",
        "updateSuccess": "Yetki başarıyla güncellendi",
        "updateConflict": "Aynı koda sahip yetki zaten mevcut",
        "updateNotFound": "Güncellenecek yetki bulunamadı",
        "updateError": "Yetki güncellenirken hata oluştu",
        "deleteRequest": "Yetki silme isteği alındı",
        "deleteSuccess": "Yetki başarıyla silindi",
        "deleteNotFound": "Silinecek yetki bulunamadı",
        "deleteError": "Yetki silinirken hata oluştu",
        "getActiveRequest": "Aktif yetkiler için istek alındı",
        "getActiveSuccess": "Aktif yetkiler başarıyla getirildi",
        "getActiveError": "Aktif yetkiler getirilirken hata oluştu"
      }
    },
    "roleService": {
      "logs": {
        "getAllRequest": "Tüm roller için istek alındı",
        "getAllSuccess": "Tüm roller başarıyla getirildi",
        "getAllNotFound": "Hiç rol bulunamadı",
        "getAllError": "Tüm roller getirilirken hata oluştu",
        "getByIdRequest": "ID ile rol sorgulama isteği alındı",
        "getByIdSuccess": "Rol başarıyla getirildi",
        "getByIdNotFound": "Rol bulunamadı",
        "getByIdError": "Rol getirilirken hata oluştu",
        "createRequest": "Rol oluşturma isteği alındı",
        "createSuccess": "Rol başarıyla oluşturuldu",
        "createConflict": "Aynı isme sahip rol zaten mevcut",
        "createError": "Rol oluşturulurken hata oluştu",
        "updateRequest": "Rol güncelleme isteği alındı",
        "updateSuccess": "Rol başarıyla güncellendi",
        "updateConflict": "Aynı isme sahip rol zaten mevcut",
        "updateNotFound": "Güncellenecek rol bulunamadı",
        "updateError": "Rol güncellenirken hata oluştu",
        "deleteRequest": "Rol silme isteği alındı",
        "deleteSuccess": "Rol başarıyla silindi",
        "deleteNotFound": "Silinecek rol bulunamadı",
        "deleteError": "Rol silinirken hata oluştu",
        "getUserRolesRequest": "Kullanıcı rolleri için istek alındı",
        "getUserRolesSuccess": "Kullanıcı rolleri başarıyla getirildi",
        "getUserRolesNotFound": "Kullanıcı rolü bulunamadı",
        "getUserRolesError": "Kullanıcı rolleri getirilirken hata oluştu",
        "updatePermissionsRequest": "Rol yetkileri güncelleme isteği alındı",
        "updatePermissionsSuccess": "Rol yetkileri başarıyla güncellendi",
        "updatePermissionsNotFound": "Güncellenecek rol bulunamadı",
        "updatePermissionsError": "Rol yetkileri güncellenirken hata oluştu"
      }
    },
    "userService": {
      "logs": {
        "getByIdRequest": "ID ile kullanıcı sorgulama isteği alındı",
        "getByIdSuccess": "Kullanıcı başarıyla getirildi",
        "getByIdNotFound": "Kullanıcı bulunamadı",
        "getByIdError": "Kullanıcı getirilirken hata oluştu",
        "getAllRequest": "Tüm kullanıcılar için istek alındı",
        "getAllSuccess": "Tüm kullanıcılar başarıyla getirildi",
        "getAllError": "Tüm kullanıcılar getirilirken hata oluştu",
        "getByRoleRequest": "Rol ile kullanıcı sorgulama isteği alındı",
        "getByRoleSuccess": "Rol ile kullanıcılar başarıyla getirildi",
        "getByRoleError": "Rol ile kullanıcılar getirilirken hata oluştu",
        "updateRequest": "Kullanıcı güncelleme isteği alındı",
        "updateSuccess": "Kullanıcı başarıyla güncellendi",
        "updateNotFound": "Güncellenecek kullanıcı bulunamadı",
        "updateError": "Kullanıcı güncellenirken hata oluştu",
        "deleteRequest": "Kullanıcı silme isteği alındı",
        "deleteSuccess": "Kullanıcı başarıyla silindi",
        "deleteNotFound": "Silinecek kullanıcı bulunamadı",
        "deleteError": "Kullanıcı silinirken hata oluştu",
        "getAuthenticatedRequest": "Kimliği doğrulanmış kullanıcı isteği alındı",
        "getAuthenticatedSuccess": "Kimliği doğrulanmış kullanıcı başarıyla getirildi",
        "getAuthenticatedNotFound": "Kimliği doğrulanmış kullanıcı bulunamadı",
        "getAuthenticatedError": "Kimliği doğrulanmış kullanıcı getirilirken hata oluştu",
        "getLeadersWithEmployeesSuccess": "Leader'lar çalışanları ile birlikte başarıyla getirildi",
        "getLeadersWithEmployeesError": "Leader'lar çalışanları ile birlikte getirilirken hata oluştu",
        "noAvailableEmployees": "Atanabilir çalışan bulunamadı",
        "roleNameRequired": "Rol adı gereklidir"
      }
    },
    "taskService": {
      "errors": {
        "task_already_exists_for_ticket": "Bu ticket'a zaten bir görev atanmış. Lütfen önce mevcut görevi tamamlayın veya silin."
      },
      "logs": {
        "task_creation_error": "Görev oluşturulurken hata oluştu",
        "task_created": "Görev başarıyla oluşturuldu",
        "task_not_found": "Görev bulunamadı",
        "task_update_error": "Görev güncellenirken hata oluştu",
        "task_updated": "Görev başarıyla güncellendi",
        "task_delete_error": "Görev silinirken hata oluştu",
        "task_deleted": "Görev başarıyla silindi",
        "get_tasks": "Görevler başarıyla listelendi",
        "get_task": "Görev başarıyla getirildi"
      }
    }
  },
  "config": {
    "cache": {
      "logs": {
        "connectSuccess": "Redis bağlantısı başarılı",
        "connectError": "Redis bağlantı hatası",
        "dataFound": "Veri Redis cache'de bulundu",
        "dataNotFound": "Veri Redis cache'de bulunamadı",
        "dataSaved": "Veri Redis cache'e kaydedildi",
        "dataSaveError": "Veri Redis cache'e kaydedilirken hata oluştu",
        "dataDeleted": "Veri Redis cache'den silindi",
        "dataDeleteError": "Veri Redis cache'den silinirken hata oluştu",
        "multipleDataDeleted": "Birden fazla veri Redis cache'den silindi",
        "multipleDataDeleteError": "Birden fazla veri Redis cache'den silinirken hata oluştu",
        "existsError": "Cache varlığı kontrol edilirken hata oluştu",
        "keysFound": "Pattern ile anahtarlar bulundu",
        "keysError": "Pattern ile anahtarlar getirilirken hata oluştu",
        "clearSuccess": "Tüm cache verisi temizlendi",
        "clearError": "Cache temizlenirken hata oluştu",
        "statsRetrieved": "Cache istatistikleri alındı",
        "statsError": "Cache istatistikleri alınırken hata oluştu",
        "disconnectSuccess": "Redis bağlantısı kapatıldı",
        "disconnectError": "Redis bağlantısı kapatılırken hata oluştu"
      }
    },
    "database": {
      "logs": {
        "connectSuccess": "MongoDB bağlantısı başarılı",
        "connectError": "MongoDB bağlantı hatası",
        "connectionInfo": "MongoDB bağlantı bilgisi",
        "testSuccess": "MongoDB bağlantı testi başarılı",
        "testError": "MongoDB bağlantı testi başarısız"
      }
    },
    "kafka": {
      "logs": {
        "brokers": "Kafka broker adresleri",
        "producerConnectSuccess": "Kafka producer bağlantısı başarılı",
        "producerConnectError": "Kafka producer bağlantı hatası",
        "producerDisconnectSuccess": "Kafka producer bağlantısı kapatıldı",
        "producerDisconnectError": "Kafka producer bağlantısı kapatılırken hata oluştu",
        "testMessageSent": "Kafka test mesajı gönderildi",
        "testConnectionFailed": "Kafka bağlantı testi başarısız"
      }
    },
    "google": {
      "logs": {
        "connectSuccess": "Google bağlantı testi başarılı (token verify fonksiyonu çalışıyor)",
        "connectError": "Google bağlantı testi başarısız"
      }
    }
  },
  "migrations": {
    "logs": {
      "added": "[Permission Migration] Eklendi: {{code}}",
      "alreadyExists": "[Permission Migration] Zaten mevcut: {{code}}",
      "allMigrated": "[Permission Migration] Tüm statik yetkiler migrate edildi."
    }
  },
  "controllers": {
    "reportController": {
      "logs": {
        "dashboardStatisticsRetrieved": "Dashboard istatistikleri başarıyla getirildi",
        "dashboardStatisticsError": "Dashboard istatistikleri getirilirken hata oluştu"
      }
    }
  }
}
